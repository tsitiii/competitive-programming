# Problem: Minimize Malware Spread - https://leetcode.com/problems/minimize-malware-spread/

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        initial.sort()
        visited = [False] * n
        component_size = [0] * n
        component_id = [-1] * n
        current_component = 0
        
        for i in range(n):
            if not visited[i]:
                stack = [i]
                visited[i] = True
                component_size[current_component] = 1
                component_id[i] = current_component
                
                while stack:
                    node = stack.pop()
                    for neighbor in range(n):
                        if graph[node][neighbor] == 1 and not visited[neighbor]:
                            visited[neighbor] = True
                            component_size[current_component] += 1
                            component_id[neighbor] = current_component
                            stack.append(neighbor)
                
                current_component += 1
        infected_count = [0] * current_component
        for node in initial:
            comp = component_id[node]
            infected_count[comp] += 1
        result = initial[0]
        max_saved = -1
        for node in initial:
            comp = component_id[node]
            if infected_count[comp] == 1:
                saved = component_size[comp]
                if saved > max_saved or (saved == max_saved and node < result):
                    max_saved = saved
                    result = node
        
        return result